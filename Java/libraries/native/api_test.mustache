{{>licenseInfo}}

package {{package}};
// test
import {{invokerPackage}}.ApiException;
{{#imports}}import {{import}};
{{/imports}}
import org.anystub.mgmt.BaseManagerFactory;
import com.fasterxml.jackson.core.type.TypeReference;


{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
{{/fullJavaUtil}}

{{#asyncNative}}
import java.util.concurrent.CompletableFuture;
{{/asyncNative}}

/**
 * API tests for {{classname}}
 */

public class {{classname}}Test extends {{classname}} {
    private final {{classname}} api;

    public {{classname}}Test({{classname}} api) {
        this.api = api;
    }

    {{#operations}}{{#operation}}
    /**
     * {{summary}}
     *
     * {{notes}}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Override
    public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}
    {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {


        {{#returnType}}
        TypeReference<{{{returnType}}}> returnType = new TypeReference<>() {};
        return BaseManagerFactory.locate()
                        .requestO(()->
                            api.{{operationId}}({{#allParams}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}),
                            returnType, "{{operationId}}", {{#allParams}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}
                        );

        {{/returnType}}
        {{^returnType}}
             BaseManagerFactory.locate()
                            .post(() ->
                                api.{{operationId}}({{#allParams}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}),
                               "{{operationId}}", {{#allParams}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
        {{/returnType}}



    }
    {{/operation}}{{/operations}}
}