/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.anystub.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import org.anystub.DecoderResponseEntity;
import org.anystub.EncoderResponseEntity;
import org.anystub.Util;
import org.anystub.mgmt.BaseManagerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;

import java.util.List;


/**
 * Anystub Proxy for PetApi
 */

public class PetApiTest extends PetApi {

    private final PetApi api;
    private final String fallbackStub;
    public PetApiTest(PetApi api) {
        this.api = api;
        this.fallbackStub = null;
    }


    @Override
    public ResponseEntity<List<Pet>> findPetsByStatusWithHttpInfo(List<String> status) throws RestClientException {
        return  BaseManagerFactory.locate(fallbackStub)
                .request2(() -> api.findPetsByStatusWithHttpInfo(status),
                        new DecoderResponseEntity<List<Pet>>(new TypeReference<List<Pet>>(){}),
                        new EncoderResponseEntity<>(),
                Util.toArray("findPetsByStatusWithHttpInfo", status));
    }


        
        /**
         * Finds Pets by status
         *
         * Multiple status values can be provided with comma separated strings
         *
         * @throws
         *          if the Api call fails
         */
        @Override
        public
         List<Pet> 
         findPetsByStatus (
List<String> status
         ) throws RestClientException {

                return BaseManagerFactory.locate(fallbackStub)
                    .request(() -> api.findPetsByStatus( status ),
                            new TypeReference<List<Pet>>() {},
                            "findPetsByStatus" , status );



        }

    @Override
    public ResponseEntity<Void> addPetWithHttpInfo(Pet pet) throws RestClientException {
        return BaseManagerFactory.locate(fallbackStub)
                .request2(()->api.addPetWithHttpInfo(pet),
                        new DecoderResponseEntity<Void>(new TypeReference<Void>(){}),
                        new EncoderResponseEntity<>(),

                        Util.toArray("addPetWithHttpInfo", pet));
    }
    @Override
    public void addPet(Pet pet) throws RestClientException {
        BaseManagerFactory.locate(fallbackStub)
                .post(()->api.addPet(pet),
                        "addPet", pet);
    }
}